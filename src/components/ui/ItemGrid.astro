---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  mail: emailCLass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, mail, linkedIn, icon, image, callToAction, classes: itemClasses = {} }) => (
        <div>
          {image && (
            <Image 
              class="mx-auto mb-2 p-2 outline-2 outline-page outline border-[16px] md:border-8 border-[#ffffff00] rounded-full w-full aspect-square object-cover"
              widths={[400, 768, 1024, 2040]}
              sizes="(max-width: 767px) 200px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
              loading="eager"
              width={576}
              height={576}
              aspectRatio={1/1}
              {...image}
              /*src={image}*/
              alt={title}
            />
          )}
          <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                />
              )}
            </div>
            <div class="mt-0.5">
              {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
              {description && (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {mail && (
                <div class={`${description ? 'mt-2' : ''}`}>
                  <Icon
                    name={'tabler:mail'}
                    class='ml-[-2rem] text-secondary w-6 h-6 mr-2 rtl:mr-0 rtl:ml-2 inline'
                  />
                  <a
                  class="underline text-muted" href={"mailto:"+mail}>
                    {mail}
                  </a>
                </div>
              )}
              {linkedIn && (
                <div class={`${description && !mail || mail ? 'mt-2' : ''}`}>
                <Icon
                  name={'tabler:brand-linkedin'}
                  class='ml-[-2rem] text-secondary w-6 h-6 mr-2 rtl:mr-0 rtl:ml-2 inline'
                />
                <a
                  class="underline text-muted" href={linkedIn}
                >
                  {title && (title.split(" ")[0])} p√• LinkedIn
                </a>
                </div>
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
