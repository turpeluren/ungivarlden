---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { name, inputs, textarea, disclaimer, button = 'Skicka', description = '', submitMessage = '' } = Astro.props;
var checkBoxChecked = false;
---

<form id="contact" 
      name={name}
      data-netlify="true"
      netlify-honeypot="bot-field"
>
  <input type="hidden" name="form-name" value={name}/>
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', description, options }) =>
          name && type!="label" ? (
            type != "checkbox" ? (
              <>
              {description && (
                <p>{description}</p>
              )}
              <div class="mb-6">
                {label && (
                  <label for={name} class="inline text-base font-medium">
                    {label}
                  </label>
                )}
                {type != "select" ? (
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    class="py-3 px-4 inline-block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                  />
                ) : (
                  <select name={name} id={name} class="w-full p-1.5 pl-2 rounded-md">
                    {options && (
                      options.map(
                        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', description } ) =>
                          name == 'välj' ? (
                            <option value={name} selected hidden disabled>{label}</option>
                          ) : (
                            <option value={name}>{label}</option>
                          )
                      ))}
                  </select>
                )}
              </div>
              </>
            ) : (
              <>
              <div class="mb-6">
                <div class="flex items-center">
                <input
                  type={type}
                  name={name}
                  id={name}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  class="mr-2 h-3.5 w-3.5 text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                />
                {label && (
                  <label for={name} class="text-base font-medium">
                    {label}
                  </label>
                )}
                </div>
                {description && (
                  <p class="text-base text-muted">{description}</p>
                )}
              </div>
              
              </>
            )
            
          ) : (
            <div class="mb-2 mt-12">
              {label && (
                <p class="font-medium text-base text-">
                  {label}
                </p>
              )}
            </div>
          )
      )
  }

  <!-- honeypot? -->
  <label class="hidden">Don’t fill this out if you’re human: <input name="bot-field" /></label>

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-base font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <label class="mt-3 flex items-start">
        <div id="disclaimer-container" class="flex items-start w-3.5 h-3.5 m-0.5 mt-1.5 ">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            onclick="flipCheckBox()"
            class=" t-0 l-0 cursor-pointer py-3 px-3 block hidden w-3.5 h-3.5 mr-2 text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
          <span id="disclaimer-style" class="cursor-pointer t-0 l-0 w-3.5 h-3.5 rounded-sm border-2 border border-gray-500 hover:border-gray-700"></span>
        </div>
        <div class="ml-2 shrink-2">
          <label id="disclaimer-label" for="disclaimer" class="cursor-pointer select-none text-base text-muted dark:text-gray-400">
            {disclaimer.label}
          </label>
        <style>
          #disclaimer-container input:checked ~ #disclaimer-style {
            background-color: #1071c0;
            border-color: #1071c0;
            display: none;
          }
          #disclaimer-container input:checked {
            display: block;
            //width: 0.875rem;
            //height: 0.875rem;
          }
        </style>
          

        {disclaimer.gdpr && (
          <>
          &nbsp;<a id="gdpr-show" href="#integritetspolicy" class="text-base text-gray-800 hover:text-black cursor-pointer underline" >Integritetspolicy</a>
          </>
        )}
        </div>
      </label>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button id="submitButton" variant="primary" type="submit" class={disclaimer && 'opacity-50'}>
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-base text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script is:inline>
  function flipCheckBox() {
    document.getElementById('disclaimer-style').classList.remove('!border-red-500');
    document.getElementById('disclaimer-label').classList.remove('text-red-500');
    if (document.getElementById('disclaimer').checked) {
      //alert("checked");
      document.getElementById("submitButton").classList.remove("opacity-50");
    } else {
      document.getElementById("submitButton").classList.add("opacity-50");
    }
  }
</script>

<script define:vars={{ submitMessage, checkBoxChecked }}>

  const handleSubmit = (event) => {
    event.preventDefault();

    const checkBox = window.document.getElementById("disclaimer");
    /*const name = window.document.getElementById("disclaimer");
    const mail = window.document.getElementById("disclaimer");
*/
    if (checkBox !== null ) {
      if (!checkBox.checked) {
        document.getElementById("disclaimer-style").classList.add('!border-red-500');
        document.getElementById("disclaimer-label").classList.add('text-red-500');
        alert("Du måste gå med på vilkoren genom att kryssa i rutan innan du kan skicka formuläret.");
        return;
      }
    }

    const myForm = event.target;
    const formData = new FormData(myForm);
    
    fetch("/", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams(formData).toString(),
    })
      .then(() => { 
        if (submitMessage) {
          alert(submitMessage);
          document.getElementById('textarea').value = "";
        } else { 
          window.location.href = '/tack'
        }})
      .catch((error) => alert(error));
  };

  function toggleGdpr() {
    document.getElementById('gdpr-policy').classList.toggle('hidden');
  }

  document
    .querySelector("form")
    .addEventListener("submit", handleSubmit);

  /*const mayBeNullElement = document.querySelector("disclaimer");
  if (mayBeNullElement != null) {
    mayBeNullElement.addEventListener("change", flipCheckBox);
  }*/

  const gdprButton = document.getElementById('gdpr-show');
  if (gdprButton != null) {
    gdprButton.addEventListener("click", toggleGdpr)
  }
  
  
</script>
