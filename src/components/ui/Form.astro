---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { name, inputs, textarea, disclaimer, button = 'Skicka', description = '', submitMessage = '' } = Astro.props;
var checkBoxChecked = false;
---

<form id="contact" 
      name={name}
      data-netlify="true"
      netlify-honeypot="bot-field"
>
  <input type="hidden" name="form-name" value={name}/>
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', description }) =>
          name && type!="label" ? (
            type != "checkbox" ? (
              <>
              {description && (
                <p>{description}</p>
              )}
              <div class="mb-6">
                {label && (
                  <label for={name} class="inline text-sm font-medium">
                    {label}
                  </label>
                )}
                <input
                  type={type}
                  name={name}
                  id={name}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  class="py-3 px-4 inline-block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                />
              </div>
              </>
            ) : (
              <>
              <div class="mb-6">
                <div class="flex items-start">
                <input
                  type={type}
                  name={name}
                  id={name}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  class="py-3 mr-4 h-3.5 w-3.5 text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                />
                {label && (
                  <label for={name} class="text-sm font-medium">
                    {label}
                  </label>
                )}
                </div>
                {description && (
                  <p class="text-sm ">{description}</p>
                )}
              </div>
              
              </>
            )
            
          ) : (
            <div class="mb-6 mt-12">
              {label && (
                <p class="font-medium">
                  {label}
                </p>
              )}
            </div>
          )
      )
  }

  <!-- honeypot? -->
  <label class="hidden">Don’t fill this out if you’re human: <input name="bot-field" /></label>

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex items-start m-0.5 mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            onchange='some_var=this.checked;'
            class="cursor-pointer mt-1 py-3 px-3 block w-3.5 h-3.5 text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3 shrink-2">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button id="submitButton" variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script define:vars={{ submitMessage, checkBoxChecked }}>

  const handleSubmit = (event) => {
    event.preventDefault();

    const checkBox = window.document.getElementById("disclaimer");
    /*const name = window.document.getElementById("disclaimer");
    const mail = window.document.getElementById("disclaimer");
*/
    if (checkBox !== null ) {
      if (!checkBox.checked) {
        alert("Du måste gå med på vilkoren genom att kryssa i rutan innan du kan skicka formuläret.");
        return;
      }
    }

    const myForm = event.target;
    const formData = new FormData(myForm);
    
    fetch("/", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams(formData).toString(),
    })
      .then(() => alert(submitMessage))
      .catch((error) => alert(error));
  };

  function flipCheckBox() {
    checkBoxChecked = some_var;
    window.document.querySelector("submitButton").classList.toggle("opacity-10");
  }

  document
    .querySelector("form")
    .addEventListener("submit", handleSubmit);

  const mayBeNullElement = document.querySelector("disclaimer");
  if (mayBeNullElement != null) {
    mayBeNullElement.addEventListener("click", flipCheckBox);
  }
  
</script>
